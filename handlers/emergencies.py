# handlers/emergencies.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from keyboards.inline import get_emergency_case_buttons, get_continue_emergency_buttons
from services.gpt import analyze_emergency_response
from database.db import async_session
from database.models import EmergencyCase, UserProgress
from utils.helpers import get_user_language, get_user_level

router = Router()

user_emergency_state = {}  # {user_id: {'case_id': int, 'attempt': int}}


@router.message(F.text == "üö® –ê–≤–∞—Ä–∏–π–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏")
async def emergency_entry(message: Message):
    user_id = message.from_user.id
    lang = await get_user_language(user_id)

    if lang == 'ru':
        intro = (
            "–í—ã –≤–æ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª üö® –ê–≤–∞—Ä–∏–π–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏.\n\n"
            "–ó–¥–µ—Å—å –≤—ã –±—É–¥–µ—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ø–µ—Ä–µ–¥–∞—á–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –≤–Ω–µ—à—Ç–∞—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É. "
            "–≠—Ç–æ –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ ‚Äî –≤—ã –±—É–¥–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º, –∞ –ò–ò –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –æ—Ç–≤–µ—Ç. "
            "–ö–∞–∂–¥–∞—è —Å–∏—Ç—É–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–∞, –∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ 3 –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ –æ—Ç–≤–µ—Ç.\n\n"
            "üßë‚Äç‚úàÔ∏è –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–µ–π—Å–æ–≤ –≤ 12 —á–∞—Å–æ–≤.\n"
            "–ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–æ—Å—Ç—É–ø."
        )
    else:
        intro = (
            "You have entered the üö® Emergency Situations section.\n\n"
            "Here you will practice reporting emergency situations to ATC. "
            "This is one of the most important parts ‚Äî you will answer by voice, and AI will analyze your response. "
            "Each scenario is unique, and you have up to 3 attempts per case.\n\n"
            "üßë‚Äç‚úàÔ∏è You have a limited number of cases in 12 hours.\n"
            "To increase the limit ‚Äî subscribe or request access."
        )

    await message.answer(intro, reply_markup=get_continue_emergency_buttons())


@router.callback_query(F.data == "start_emergency")
async def start_emergency_case(callback: CallbackQuery):
    user_id = callback.from_user.id
    level = await get_user_level(user_id)
    lang = await get_user_language(user_id)

    async with async_session() as session:
        cases = await session.execute(
            EmergencyCase.__table__.select()
        )
        all_cases = cases.fetchall()

    if not all_cases:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–µ–π—Å–æ–≤.")
        return

    case = all_cases[0]  # –≤ –±—É–¥—É—â–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö
    user_emergency_state[user_id] = {"case_id": case.id, "attempt": 1}

    text = case.text_ru if lang == 'ru' else case.text_en
    await callback.message.answer(f"‚ö†Ô∏è –°–∏—Ç—É–∞—Ü–∏—è:\n{text}", reply_markup=get_emergency_case_buttons())
    await callback.answer()


@router.callback_query(F.data == "example_answer")
async def show_sample_answer(callback: CallbackQuery):
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)

    async with async_session() as session:
        case_id = user_emergency_state.get(user_id, {}).get("case_id")
        case = await session.get(EmergencyCase, case_id)

    answer = case.sample_answer_en if case else "Sample answer not found."
    await callback.message.answer(f"üí¨ –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:\n{answer}")
    await callback.answer()


@router.message(F.voice)
async def handle_emergency_voice(message: Message):
    user_id = message.from_user.id
    case_state = user_emergency_state.get(user_id)

    if not case_state:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–µ–π—Å.")
        return

    attempt = case_state["attempt"]
    file_id = message.voice.file_id
    level = await get_user_level(user_id)

    score, passed = await analyze_emergency_response(file_id, level)

    if passed:
        await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç. –£—Ä–æ–≤–µ–Ω—å: {score}\n–ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏?")
        del user_emergency_state[user_id]
    else:
        if attempt < 3:
            user_emergency_state[user_id]["attempt"] += 1
            await message.answer("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –ø—Ä–∏–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        else:
            await message.answer("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–µ–π—Å –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –æ–±—É—á–µ–Ω–∏—é.")
            del user_emergency_state[user_id]
