# handlers/emergencies.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from sqlalchemy import select
from database.db import async_session
from database.models import EmergencyCase, User
from keyboards.inline import get_emergency_case_buttons, get_emergency_next_buttons
from services.gpt import analyze_emergency_response
from services.access import check_emergency_limit, register_emergency_attempt
from utils.helpers import get_emergency_cases_by_language

router = Router()
active_cases = {}


@router.message(F.text.lower() == "üö® –∞–≤–∞—Ä–∏–π–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏")
async def enter_emergencies(message: Message):
    user_id = message.from_user.id

    async with async_session() as session:
        user = (await session.execute(select(User).where(User.telegram_id == user_id))).scalar()

        if not await check_emergency_limit(user):
            await message.answer("‚õîÔ∏è –õ–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")
            return

        cases = await get_emergency_cases_by_language(user.language)

        if not cases:
            await message.answer("‚ùå –ö–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        case = cases[0]
        active_cases[user_id] = case.id

        await message.answer(
            f"üìç –°–∏—Ç—É–∞—Ü–∏—è:\n\n{case.text_ru if user.language == 'ru' else case.text_en}",
            reply_markup=get_emergency_case_buttons(user.language)
        )


@router.callback_query(F.data == "example_answer")
async def show_example(callback: CallbackQuery):
    user_id = callback.from_user.id
    case_id = active_cases.get(user_id)

    if not case_id:
        await callback.answer("‚õîÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–µ–π—Å.")
        return

    async with async_session() as session:
        case = await session.get(EmergencyCase, case_id)
        answer = case.sample_answer_en or "No example available."
        await callback.message.answer(f"üìù –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:\n\n{answer}")
        await callback.answer()


@router.callback_query(F.data == "emergency_voice_answer")
async def request_voice(callback: CallbackQuery):
    await callback.message.answer("üé§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –≥–æ–ª–æ—Å–æ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.")
    await callback.answer()


@router.message(F.voice)
async def handle_voice(message: Message):
    user_id = message.from_user.id
    case_id = active_cases.get(user_id)

    if not case_id:
        return await message.answer("‚õîÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–µ–π—Å–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é.")

    # –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
    await message.answer("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à –æ—Ç–≤–µ—Ç...")

    level, feedback = await analyze_emergency_response(message.voice, user_id)

    await message.answer(f"üìä –û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è: {level}\n\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{feedback}")
    await register_emergency_attempt(user_id)

    await message.answer("–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é —Å–∏—Ç—É–∞—Ü–∏—é?", reply_markup=get_emergency_next_buttons())


@router.callback_query(F.data == "next_emergency_case")
async def next_case(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        user = (await session.execute(select(User).where(User.telegram_id == user_id))).scalar()
        cases = await get_emergency_cases_by_language(user.language)
        if not cases:
            await callback.message.answer("‚ùå –ö–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        next_case = cases[1 % len(cases)]
        active_cases[user_id] = next_case.id
        await callback.message.answer(
            f"üìç –°–∏—Ç—É–∞—Ü–∏—è:\n\n{next_case.text_ru if user.language == 'ru' else next_case.text_en}",
            reply_markup=get_emergency_case_buttons(user.language)
        )
        await callback.answer()
