# handlers/exam.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from keyboards.inline import get_exam_start_button, get_exam_next_step_button
from services.gpt import analyze_exam_response
from database.db import async_session
from database.models import UserProgress
from utils.helpers import get_user_level

router = Router()

user_exam_state = {}  # {user_id: {'step': int, 'answers': []}}


@router.message(F.text.lower() == "üé§ —ç–∫–∑–∞–º–µ–Ω")
async def exam_entry(message: Message):
    user_id = message.from_user.id
    user_exam_state[user_id] = {"step": 0, "answers": []}

    await message.answer(
        "üé§ –í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º —ç–∫–∑–∞–º–µ–Ω–∞.\n\n"
        "–≠–∫–∑–∞–º–µ–Ω —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 —ç—Ç–∞–ø–æ–≤:\n"
        "1. –ö—Ä–∞—Ç–∫–∏–π —Ä–∞—Å—Å–∫–∞–∑ –æ —Å–µ–±–µ\n"
        "2. –û—Ç–≤–µ—Ç—ã –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "3. –ü–µ—Ä–µ–¥–∞—á–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ—à—Ç–∞—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏ –æ—Ç—Ä–∞–±–æ—Ç–∫—É –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º.",
        reply_markup=get_exam_start_button()
    )


@router.callback_query(F.data == "start_exam")
async def start_exam(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_exam_state[user_id]["step"] = 1
    await callback.message.answer("üë§ –≠—Ç–∞–ø 1: –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await callback.answer()


@router.message(F.voice, F.chat.type == "private")
async def process_exam_voice(message: Message):
    user_id = message.from_user.id
    if user_id not in user_exam_state:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç–∫–∑–∞–º–µ–Ω —Å –∫–æ–º–∞–Ω–¥—ã üé§ –≠–∫–∑–∞–º–µ–Ω.")
        return

    step = user_exam_state[user_id]["step"]
    file_id = message.voice.file_id
    user_exam_state[user_id]["answers"].append((step, file_id))

    if step == 1:
        user_exam_state[user_id]["step"] = 2
        await message.answer("üìã –≠—Ç–∞–ø 2: –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã (–æ–∑–≤—É—á–∫–∞ + –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç).\n(–ø—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –±—É–¥–µ—Ç –ø–æ–∑–∂–µ)")
    elif step == 2:
        user_exam_state[user_id]["step"] = 3
        await message.answer("üö® –≠—Ç–∞–ø 3: –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª —Å–ª—É—á–∞–π:\n'Passenger has severe nausea and vomiting. What will you report to ATC?'\n–û—Ç–≤–µ—Ç—å—Ç–µ –≥–æ–ª–æ—Å–æ–º.")
    elif step == 3:
        await message.answer("üéØ –≠–∫–∑–∞–º–µ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω. –ò–¥—ë—Ç –∞–Ω–∞–ª–∏–∑...")

        level = await get_user_level(user_id)
        score = await analyze_exam_response(user_id, level, user_exam_state[user_id]["answers"])

        async with async_session() as session:
            progress = UserProgress(user_id=user_id, exam_score=score)
            session.add(progress)
            await session.commit()

        await message.answer(
            f"‚úÖ –≠–∫–∑–∞–º–µ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω.\n\nüìä –í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ —à–∫–∞–ª–µ ICAO: {score}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —ç–∫–∑–∞–º–µ–Ω —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—É—á–µ–Ω–∏—é –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.",
            reply_markup=get_exam_next_step_button()
        )

        del user_exam_state[user_id]
