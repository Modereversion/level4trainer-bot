# handlers/exam.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from sqlalchemy import select
from database.db import async_session
from database.models import User
from services.gpt import analyze_exam_voice, analyze_emergency_response
from services.access import check_exam_limit, register_exam_attempt
from keyboards.inline import get_exam_stage_buttons, get_exam_start_button

router = Router()
exam_stage = {}


@router.message(F.text.lower() == "üé§ —ç–∫–∑–∞–º–µ–Ω")
async def enter_exam(message: Message):
    user_id = message.from_user.id

    async with async_session() as session:
        user = (await session.execute(select(User).where(User.telegram_id == user_id))).scalar()

        if not await check_exam_limit(user):
            await message.answer("‚õîÔ∏è –õ–∏–º–∏—Ç —ç–∫–∑–∞–º–µ–Ω–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")
            return

    exam_stage[user_id] = 1
    await message.answer(
        "üéì –≠–∫–∑–∞–º–µ–Ω —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ç—Ä—ë—Ö —ç—Ç–∞–ø–æ–≤:\n\n"
        "1. –ö—Ä–∞—Ç–∫–æ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ\n"
        "2. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∞–≤–∏–∞—Ü–∏–∏\n"
        "3. –ü–µ—Ä–µ–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ—à—Ç–∞—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏\n\n"
        "üìå –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–µ—Ä–µ–¥ —ç–∫–∑–∞–º–µ–Ω–æ–º.",
        reply_markup=get_exam_start_button()
    )


@router.callback_query(F.data == "start_exam")
async def start_exam(callback: CallbackQuery):
    user_id = callback.from_user.id
    exam_stage[user_id] = 1
    await callback.message.answer("üó£ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º). –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await callback.answer()


@router.message(F.voice)
async def process_voice_exam(message: Message):
    user_id = message.from_user.id
    stage = exam_stage.get(user_id, 1)

    if stage == 1:
        await message.answer("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—Å–∫–∞–∑ –æ —Å–µ–±–µ...")
        result = await analyze_exam_voice(message.voice, user_id)
        await message.answer(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        exam_stage[user_id] = 2
        await message.answer("‚ùì –í–æ–ø—Ä–æ—Å –ø–æ –∞–≤–∏–∞—Ü–∏–∏. –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç.")
        return

    elif stage == 2:
        await message.answer("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å...")
        result = await analyze_exam_voice(message.voice, user_id)
        await message.answer(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        exam_stage[user_id] = 3
        await message.answer("üö® –°–∏—Ç—É–∞—Ü–∏—è: –ü–∞—Å—Å–∞–∂–∏—Ä—É —Å—Ç–∞–ª–æ –ø–ª–æ—Ö–æ, —É –Ω–µ–≥–æ —Ä–≤–æ—Ç–∞. –ß—Ç–æ –≤—ã –¥–æ–ª–æ–∂–∏—Ç–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É? (–ù–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)")
        return

    elif stage == 3:
        await message.answer("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤–∞—Ä–∏–π–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é...")
        level, feedback = await analyze_emergency_response(message.voice, user_id)
        await message.answer(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: {level}\n\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{feedback}")
        await register_exam_attempt(user_id)
        del exam_stage[user_id]

        await message.answer(
            "üéâ –≠–∫–∑–∞–º–µ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
            "üìå –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —ç–∫–∑–∞–º–µ–Ω —Å–Ω–æ–≤–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞."
        )
