# handlers/training.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from sqlalchemy import select
from random import choice
from database.db import async_session
from database.models import Question
from keyboards.inline import (
    get_training_buttons,
    get_after_level_buttons,
)
from utils.helpers import get_user_level, save_progress

router = Router()

user_questions_cache = {}  # {user_id: [question_ids]}


@router.message(F.text.lower() == "üöÄ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
async def start_training(message: Message):
    await message.answer(
        "üöÄ –í—ã –Ω–∞—á–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.\n"
        "–í–∞–º –±—É–¥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —É—Å—Ç–Ω–æ–π —á–∞—Å—Ç–∏ ICAO.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã, –ø–µ—Ä–µ–≤–æ–¥—ã –∏ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.",
    )
    await send_random_question(message)


async def send_random_question(message: Message):
    user_id = message.from_user.id
    level = await get_user_level(user_id)

    async with async_session() as session:
        query = select(Question).where(Question.level == level)
        all_questions = (await session.scalars(query)).all()

        if not all_questions:
            await message.answer("–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è.")
            return

        if user_id not in user_questions_cache:
            user_questions_cache[user_id] = []

        available = [q for q in all_questions if q.id not in user_questions_cache[user_id]]
        if not available:
            await message.answer(
                f"üéâ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —É—Ä–æ–≤–Ω—è {level.upper()}!",
                reply_markup=get_after_level_buttons(level)
            )
            return

        question = choice(available)
        user_questions_cache[user_id].append(question.id)

        await save_progress(user_id, question_id=question.id)

        await message.answer(
            f"‚ùì {question.text_en}",
            reply_markup=get_training_buttons(question.id)
        )


@router.callback_query(F.data.startswith("answer_"))
async def show_answer(callback: CallbackQuery):
    _, qid = callback.data.split("_")
    qid = int(qid)
    async with async_session() as session:
        question = await session.get(Question, qid)
        if question:
            await callback.message.edit_text(
                f"‚úÖ {question.text_en}\n\nüí¨ {question.answer_en}",
                reply_markup=get_training_buttons(qid)
            )
    await callback.answer()


@router.callback_query(F.data.startswith("translateq_"))
async def translate_question(callback: CallbackQuery):
    _, qid = callback.data.split("_")
    qid = int(qid)
    async with async_session() as session:
        question = await session.get(Question, qid)
        if question:
            await callback.message.edit_text(
                f"‚ùì {question.text_ru}",
                reply_markup=get_training_buttons(qid, translated_q=True)
            )
    await callback.answer()


@router.callback_query(F.data.startswith("translatea_"))
async def translate_answer(callback: CallbackQuery):
    _, qid = callback.data.split("_")
    qid = int(qid)
    async with async_session() as session:
        question = await session.get(Question, qid)
        if question:
            await callback.message.edit_text(
                f"‚ùì {question.text_ru}\n\nüí¨ {question.answer_ru}",
                reply_markup=get_training_buttons(qid, translated_q=True, translated_a=True)
            )
    await callback.answer()


@router.callback_query(F.data == "next_question")
async def next_question(callback: CallbackQuery):
    await send_random_question(callback.message)
    await callback.answer()


@router.callback_query(F.data == "back_to_previous")
async def previous_question(callback: CallbackQuery):
    # –ü–æ–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    await callback.answer("‚è™ –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True)
