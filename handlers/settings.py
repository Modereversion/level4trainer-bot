# handlers/settings.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from sqlalchemy import update
from database.db import async_session
from database.models import User
from keyboards.inline import get_settings_buttons, get_voice_settings_buttons, get_daily_buttons, get_level_buttons
from utils.helpers import get_user_language, get_user_voice_settings, get_user_level, get_user_daily_settings

router = Router()


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings_menu(message: Message):
    user_id = message.from_user.id
    lang = await get_user_language(user_id)
    level = await get_user_level(user_id)
    voice_q, voice_a = await get_user_voice_settings(user_id)
    q_day, t_day = await get_user_daily_settings(user_id)

    await message.answer(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
        f"–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {lang}\n"
        f"–í—ã–±—Ä–∞–Ω —É—Ä–æ–≤–µ–Ω—å: {level}\n"
        f"–û–∑–≤—É—á–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {'–≤–∫–ª—é—á–µ–Ω–∞' if voice_q else '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}\n"
        f"–û–∑–≤—É—á–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤: {'–≤–∫–ª—é—á–µ–Ω–∞' if voice_a else '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}\n"
        f"–í–æ–ø—Ä–æ—Å –¥–Ω—è: {'–≤–∫–ª—é—á–µ–Ω' if q_day else '–æ—Ç–∫–ª—é—á–µ–Ω'}\n"
        f"–°–æ–≤–µ—Ç –¥–Ω—è: {'–≤–∫–ª—é—á–µ–Ω' if t_day else '–æ—Ç–∫–ª—é—á–µ–Ω'}",
        reply_markup=get_settings_buttons()
    )


@router.callback_query(F.data == "change_voice")
async def change_voice_menu(callback: CallbackQuery):
    await callback.message.edit_text("üîä –û–∑–≤—É—á–∫–∞", reply_markup=get_voice_settings_buttons())
    await callback.answer()


@router.callback_query(F.data.startswith("voice_"))
async def set_voice(callback: CallbackQuery):
    action, target = callback.data.split("_")[1:]
    user_id = callback.from_user.id

    async with async_session() as session:
        stmt = update(User).where(User.telegram_id == user_id)
        if target == "question":
            stmt = stmt.values(voice_enabled=(action == "on"))
        elif target == "answer":
            stmt = stmt.values(answer_enabled=(action == "on"))
        await session.execute(stmt)
        await session.commit()

    await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∑–≤—É—á–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ‚úÖ")
    await show_settings_menu(callback.message)


@router.callback_query(F.data == "daily_settings")
async def daily_settings_menu(callback: CallbackQuery):
    await callback.message.edit_text("üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–Ω—è", reply_markup=get_daily_buttons())
    await callback.answer()


@router.callback_query(F.data.startswith("toggle_qotd"))
async def toggle_question_of_day(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        user = await session.get(User, user_id)
        user.question_of_the_day = not user.question_of_the_day
        await session.commit()
    await callback.answer("–ò–∑–º–µ–Ω–µ–Ω–æ.")
    await daily_settings_menu(callback)


@router.callback_query(F.data.startswith("toggle_tip"))
async def toggle_tip_of_day(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with async_session() as session:
        user = await session.get(User, user_id)
        user.tip_of_the_day = not user.tip_of_the_day
        await session.commit()
    await callback.answer("–ò–∑–º–µ–Ω–µ–Ω–æ.")
    await daily_settings_menu(callback)


@router.callback_query(F.data == "change_level")
async def change_level_menu(callback: CallbackQuery):
    await callback.message.edit_text("üìà –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=get_level_buttons())
    await callback.answer()


@router.callback_query(F.data.startswith("level_"))
async def set_level(callback: CallbackQuery):
    new_level = callback.data.split("_")[1]
    user_id = callback.from_user.id

    async with async_session() as session:
        stmt = update(User).where(User.telegram_id == user_id).values(level=new_level)
        await session.execute(stmt)
        await session.commit()

    await callback.answer("–£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω—ë–Ω ‚úÖ")
    await show_settings_menu(callback.message)
